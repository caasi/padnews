// Generated by LiveScript 1.2.0
var request, ent, deepDiff, Padnews;
request = require('request');
ent = require('ent');
deepDiff = require('deep-diff');
Padnews = (function(){
  Padnews.displayName = 'Padnews';
  var prototype = Padnews.prototype, constructor = Padnews;
  function Padnews(id, domain){
    this.id = id;
    this.domain = domain;
    this.get = bind$(this, 'get', prototype);
    this.domain = this.domain ? domain + "." : '';
    this.prev = [];
    this.news = [];
  }
  prototype.get = function(err, res, body){
    var last, i$, ref$, len$, line, news;
    if (err || res.statusCode !== 200) {
      return;
    }
    this.prev = this.news;
    this.news = [];
    for (i$ = 0, len$ = (ref$ = body.split(/(<\/p>|<p>)/)).length; i$ < len$; ++i$) {
      line = ref$[i$];
      line = line.replace(/<[^<]*>/gi, '');
      line = ent.decode(line);
      news = /^\s*(\d?\d:\S\S)\s*(?:\[\s*([^\[]*)\s*\])?\s*(.+)\s*/.exec(line);
      if (news) {
        last = {
          time: news[1],
          location: news[2] || '',
          content: [news[3]]
        };
        this.news.push(last);
      } else if (line.length && !/\r?\n/.test(line)) {
        if (last != null) {
          last.content.push(line);
        }
      }
    }
    this.news.reverse();
  };
  prototype.run = function(delay, onMsg){
    var updateLoop, this$ = this;
    (updateLoop = function(){
      var i$, to$, i, current, prev, ds;
      request("https://" + this$.domain + "hackpad.com/ep/pad/static/" + this$.id, this$.get);
      if (this$.prev.length) {
        for (i$ = 0, to$ = this$.news.length; i$ < to$; ++i$) {
          i = i$;
          current = this$.news[i];
          prev = this$.prev[i];
          if (prev) {
            ds = deepDiff.diff(current, prev);
            if (!ds) {
              continue;
            }
            if (onMsg != null) {
              onMsg.call(this$, 'update', current, i, ds);
            }
          } else {
            if (onMsg != null) {
              onMsg.call(this$, 'create', current, i);
            }
          }
        }
        for (i$ = this$.prev.length - 1, to$ = this$.news.length; i$ >= to$; --i$) {
          i = i$;
          prev = this$.prev[i];
          if (onMsg != null) {
            onMsg.call(this$, 'remove', prev, i);
          }
        }
      } else if (this$.news.length) {
        if (onMsg != null) {
          onMsg.call(this$, 'ready');
        }
      }
      return setTimeout(updateLoop, delay);
    })();
  };
  return Padnews;
}());
module.exports = Padnews;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
// Generated by LiveScript 1.2.0
var request, ent, deepDiff, Padnews;
request = require('request');
ent = require('ent');
deepDiff = require('deep-diff');
Padnews = (function(){
  Padnews.displayName = 'Padnews';
  var regex, prototype = Padnews.prototype, constructor = Padnews;
  regex = {
    splitter: /(<\/p>|<p>)/,
    tags: /<[^<]*>/gi,
    entry: /^\s*(\d?\d:\S\S)\s*(?:\[\s*([^\[]*)\s*\])?\s*(.+)\s*/,
    newline: /\r?\n/
  };
  function Padnews(id, domain, apiClient){
    this.id = id;
    this.domain = domain;
    this.apiClient = apiClient;
    this.run = bind$(this, 'run', prototype);
    this.get = bind$(this, 'get', prototype);
    this.getByApi = bind$(this, 'getByApi', prototype);
    this.domain = this.domain ? domain + "." : '';
    this.delay = 5000;
    this.prev = [];
    this.news = [];
  }
  prototype.getByApi = function(err, data){
    this.get(err, null, data);
  };
  prototype.get = function(err, res, body){
    var last, i$, ref$, len$, line, news;
    if (err || res.statusCode !== 200) {
      return;
    }
    this.prev = this.news;
    this.news = [];
    for (i$ = 0, len$ = (ref$ = body.split(regex.splitter)).length; i$ < len$; ++i$) {
      line = ref$[i$];
      line = line.replace(regex.tags, '');
      line = ent.decode(line);
      news = regex.entry.exec(line);
      if (news) {
        last = {
          time: news[1],
          location: news[2] || '',
          content: [news[3]]
        };
        this.news.push(last);
      } else if (line.length && !regex.newline.test(line)) {
        if (last != null) {
          last.content.push(line);
        }
      }
    }
    this.news.reverse();
    this.didUpdate();
  };
  prototype.didUpdate = function(){
    var i$, to$, i, current, prev, ds;
    if (this.prev.length) {
      for (i$ = 0, to$ = this.news.length; i$ < to$; ++i$) {
        i = i$;
        current = this.news[i];
        prev = this.prev[i];
        if (prev) {
          ds = deepDiff.diff(current, prev);
          if (!ds) {
            continue;
          }
          if (typeof this.onMsg === 'function') {
            this.onMsg('update', current, i, ds);
          }
        } else {
          if (typeof this.onMsg === 'function') {
            this.onMsg('create', current, i);
          }
        }
      }
      for (i$ = this.prev.length - 1, to$ = this.news.length; i$ >= to$; --i$) {
        i = i$;
        prev = this.prev[i];
        if (typeof this.onMsg === 'function') {
          this.onMsg('remove', prev, i);
        }
      }
    } else if (this.news.length) {
      if (typeof this.onMsg === 'function') {
        this.onMsg('ready');
      }
    }
    setTimeout(this.run, this.delay);
  };
  prototype.run = function(){
    if (!this.apiClient) {
      request("https://" + this.domain + "hackpad.com/ep/pad/static/" + this.id, this.get);
    } else {
      this.apiClient['export'](this.id, 'latest', 'txt', this.getByApi);
    }
  };
  return Padnews;
}());
module.exports = Padnews;
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
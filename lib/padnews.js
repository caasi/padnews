// Generated by LiveScript 1.2.0
var request, split, diff, deepDiff, Padnews;
request = require('request');
split = require('split');
diff = require('diff');
deepDiff = require('deep-diff');
Padnews = (function(){
  Padnews.displayName = 'Padnews';
  var prototype = Padnews.prototype, constructor = Padnews;
  function Padnews(id){
    this.id = id;
    this.news = [];
  }
  prototype.separator = /(\r?\n|<\/p>|<p>)/;
  prototype.match = /\s*(\d?\d:\S\S)\s*(?:\[\s*(.+)\s*\])?\s*(.+)\s*/;
  prototype.get = function(cb){
    var last, result, this$ = this;
    result = [];
    return request.get("https://g0v.hackpad.com/ep/pad/static/" + this.id).pipe(split(this.separator)).on('data', function(it){
      var news;
      news = this$.match.exec(it);
      if (news) {
        last = {
          time: news[1],
          location: news[2] || '',
          content: [news[3]]
        };
        return result.push(last);
      } else if (it.length && !/(\r?\n|^<.*>$)/.test(it)) {
        return last != null ? last.content.push(it) : void 8;
      }
    }).on('end', function(){
      return typeof cb === 'function' ? cb(result.reverse()) : void 8;
    });
  };
  prototype.run = function(delay, onMsg){
    var updateLoop, this$ = this;
    (updateLoop = function(){
      return this$.get(function(news){
        var newEntries, i, current, prev, updated, content, count, ds, i$, len$, d, update, parts, j$, len1$, part;
        newEntries = [];
        for (i in news) {
          current = news[i];
          prev = this$.news[i];
          if (prev) {
            updated = false;
            if (current.time === prev.time && current.location === prev.location && current.content === prev.content) {
              continue;
            }
            count = 0;
            ds = deepDiff.diff(current, prev);
            if (!ds) {
              continue;
            }
            for (i$ = 0, len$ = ds.length; i$ < len$; ++i$) {
              d = ds[i$];
              if (d.path[0] === 'time' || d.path[0] === 'location') {
                update = true;
                break;
              }
              if (d.path[0] === 'content') {
                content = d;
              }
              if (content) {
                parts = diff.diffChars(content.lhs, content.rhs);
                for (j$ = 0, len1$ = parts.length; j$ < len1$; ++j$) {
                  part = parts[j$];
                  if (part.added || part.removed) {
                    count += part.value.length;
                  }
                }
              }
            }
            if (count < 5) {
              updated = true;
            }
            if (updated) {
              import$(prev, current);
              if (typeof onMsg === 'function') {
                onMsg('update', current);
              }
              break;
            }
          } else {
            newEntries.push(current);
            if (typeof onMsg === 'function') {
              onMsg('create', current);
            }
          }
        }
        Array.prototype.push.apply(this$.news, newEntries);
        return setTimeout(updateLoop, delay);
      });
    })();
  };
  return Padnews;
}());
module.exports = Padnews;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
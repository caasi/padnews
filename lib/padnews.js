// Generated by LiveScript 1.2.0
var request, split, diff, Padnews;
request = require('request');
split = require('split');
diff = require('diff');
Padnews = (function(){
  Padnews.displayName = 'Padnews';
  var prototype = Padnews.prototype, constructor = Padnews;
  function Padnews(id){
    this.id = id;
    this.news = [];
  }
  prototype.separator = /(\r?\n|<\/p>|<p>)/;
  prototype.match = /\s*(\d\d:\d\d)\s*(?:\[\s*(.+)\s*\])?\s*(.+)\s*/;
  prototype.get = function(cb){
    var result, this$ = this;
    result = [];
    return request.get("https://g0v.hackpad.com/ep/pad/static/" + this.id).pipe(split(this.separator)).on('data', function(it){
      var news;
      news = this$.match.exec(it);
      if (news) {
        return result.push({
          time: news[1],
          location: news[2],
          content: news[3]
        });
      }
    }).on('end', function(){
      return typeof cb === 'function' ? cb(result.reverse()) : void 8;
    });
  };
  prototype.run = function(delay, onCreate, onUpdate){
    var update, this$ = this;
    (update = function(){
      return this$.get(function(news){
        var i$, len$, current, updated, found, j$, ref$, len1$, prev, parts, count, k$, len2$, part;
        for (i$ = 0, len$ = news.length; i$ < len$; ++i$) {
          current = news[i$];
          updated = false;
          found = false;
          for (j$ = 0, len1$ = (ref$ = this$.news).length; j$ < len1$; ++j$) {
            prev = ref$[j$];
            if (current.time === prev.time && current.location === prev.location) {
              parts = diff.diffChars(current.content, prev.content);
              if (parts.length === 1) {
                found = true;
                break;
              }
              count = 0;
              for (k$ = 0, len2$ = parts.length; k$ < len2$; ++k$) {
                part = parts[k$];
                if (part.added || part.removed) {
                  count += part.value.length;
                }
              }
              if (count < 5) {
                updated = true;
                prev.content = current.content;
                if (typeof onUpdate === 'function') {
                  onUpdate(current, parts);
                }
                break;
              }
            }
          }
          if (!found && !updated) {
            this$.news.push(current);
            if (typeof onCreate === 'function') {
              onCreate(current);
            }
          }
        }
        return setTimeout(update, delay);
      });
    })();
  };
  return Padnews;
}());
module.exports = Padnews;
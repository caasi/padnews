// Generated by LiveScript 1.2.0
var request, split, deepDiff, Padnews;
request = require('request');
split = require('split');
deepDiff = require('deep-diff');
Padnews = (function(){
  Padnews.displayName = 'Padnews';
  var prototype = Padnews.prototype, constructor = Padnews;
  function Padnews(id, domain){
    this.id = id;
    this.domain = domain;
    this.domain = this.domain ? domain + "." : '';
    this.news = [];
  }
  prototype.separator = /(<\/p>|<p>)/;
  prototype.match = /\s*(\d?\d:\S\S)\s*(?:\[\s*(.+)\s*\])?\s*(.+)\s*/;
  prototype.get = function(cb){
    var last, result, this$ = this;
    result = [];
    return request.get("https://" + this.domain + "hackpad.com/ep/pad/static/" + this.id).pipe(split(this.separator)).on('data', function(it){
      var news;
      news = this$.match.exec(it);
      if (news) {
        last = {
          time: news[1],
          location: news[2] || '',
          content: [news[3]]
        };
        return result.push(last);
      } else if (it.length && !/(\r?\n|^<.*>$)/.test(it)) {
        return last != null ? last.content.push(it) : void 8;
      }
    }).on('end', function(){
      return typeof cb === 'function' ? cb(result.reverse()) : void 8;
    });
  };
  prototype.run = function(delay, onMsg){
    var updateLoop, this$ = this;
    (updateLoop = function(){
      return this$.get(function(news){
        var i, current, prev, ds;
        for (i in news) {
          current = news[i];
          prev = this$.news[i];
          if (prev) {
            ds = deepDiff.diff(current, prev);
            if (!ds) {
              continue;
            }
            if (typeof onMsg === 'function') {
              onMsg('update', current, i, ds);
            }
          } else {
            if (typeof onMsg === 'function') {
              onMsg('create', current, i);
            }
          }
        }
        this$.news = news;
        return setTimeout(updateLoop, delay);
      });
    })();
  };
  return Padnews;
}());
module.exports = Padnews;